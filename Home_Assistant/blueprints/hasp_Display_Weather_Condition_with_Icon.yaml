blueprint:
  name: "HASPone p[x].b[y] displays the current weather condition with icons"
  description: |

    ## Blueprint Version: `1.05.00`

    # Description

    A HASPone button displays the current weather condition on the right with a matching icon on the left

    ![Preview](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/hasp_Display_Weather_Condition_with_Icon.png)

    ## HASPone Page and Button reference

    <details>

    This automation is designed to work with the full-width buttons found on pages 1-3

    | Pages 1-3 |
    |-----------|
    | ![Pages 1-3](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p1-p3_4buttons.png) |

    </details>

    ## Nextion color codes

    <details>

    The Nextion environment utilizes RGB 565 encoding.  [Use this handy convertor](https://nodtem66.github.io/nextion-hmi-color-convert/index.html) to select your colors and convert to the RGB 565 format.

    Here are some example colors:

    | Color  | Code  |
    |--------|-------|
    | White  | 65535 |
    | Black  | 0     |
    | Grey   | 25388 |
    | Red    | 63488 |
    | Green  | 2016  |
    | Blue   | 31    |
    | Yellow | 65504 |
    | Orange | 64512 |
    | Brown  | 48192 |

    </details>

  domain: automation
  input:
    haspdevice:
      name: "HASPone Device"
      description: "Select the HASPone device"
      selector:
        device:
          integration: mqtt
          manufacturer: "HASwitchPlate"
          model: "HASPone v1.0.0"
    hasppage:
      name: "HASPone Page"
      description: "Select the HASPone page (1-3) for the temperature"
      default: 1
      selector:
        number:
          min: 1
          max: 3
          mode: slider
          unit_of_measurement: page
    haspbutton:
      name: "HASPone Button"
      description: "Select the HASPone button (4-7) for the temperature.  Refer to the HASPone Page and Button reference above."
      default: 4
      selector:
        number:
          min: 4
          max: 7
          mode: slider
          unit_of_measurement: button
    weather_provider:
      name: "Weather provider"
      description: "Select the weather provider to obtain the temperature"
      selector:
        entity:
          domain: weather
    selected_fgcolor:
      name: "Selected foreground color"
      description: 'Selected foreground color in Nextion RGB565 format (see "Nextion color codes" above for reference). -1 = Current theme selected foreground color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    selected_bgcolor:
      name: "Selected background color"
      description: 'Selected background color in Nextion RGB565 format (see "Nextion color codes" above for reference). -1 = Current theme selected background color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    unselected_fgcolor:
      name: "Unselected foreground color"
      description: 'Unselected foreground color in Nextion RGB565 format (see "Nextion color codes" above for reference). -1 = Current theme unselected foreground color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    unselected_bgcolor:
      name: "Unselected background color"
      description: 'Unselected background color in Nextion RGB565 format (see "Nextion color codes" above for reference). -1 = Current theme unselected background color.'
      default: -1
      selector:
        number:
          min: -1
          max: 65535
          mode: slider
    colorize_icon:
      name: "Colorize weather icon"
      description: "When enabled, weather condition icon will be colored based on the condition (eg, sunny will be yellow).  If disabled, use the colors selected above."
      default: true
      selector:
        boolean:

mode: parallel
max_exceeded: silent

variables:
  haspname: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\..+_sensor(?:_\d+|)$") -%}
        {{- entity|regex_replace(find="^sensor\.(?:hasp_)?(.*)_sensor(?:_\d+|)$", replace="\\1", ignorecase=true) -}}
      {%- endif -%}
    {%- endfor -%}
  haspsensor: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\..+_sensor(?:_\d+|)$") -%}
        {{ entity }}
      {%- endif -%}
    {%- endfor -%}
  hasppage: !input hasppage
  haspbutton: !input haspbutton
  weather_provider: !input weather_provider
  selected_fgcolor: !input selected_fgcolor
  selected_bgcolor: !input selected_bgcolor
  unselected_fgcolor: !input unselected_fgcolor
  unselected_bgcolor: !input unselected_bgcolor
  colorize_icon: !input colorize_icon
  haspobject: '{{ "p[" ~ hasppage ~ "].b[" ~ haspbutton ~ "]" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  icon: >-
    {%- set condition=states(weather_provider) -%}
    {%- if condition == "clear-night" -%}
      
    {%- elif condition == "cloudy" -%}
      
    {%- elif condition == "fog" -%}
      
    {%- elif condition == "hail" -%}
      
    {%- elif condition == "lightning" -%}
      
    {%- elif condition == "lightning-rainy" -%}
      
    {%- elif condition == "partlycloudy" -%}
      
    {%- elif condition == "pouring" -%}
      
    {%- elif condition == "rainy" -%}
      
    {%- elif condition == "snowy" -%}
      
    {%- elif condition == "snowy-rainy" -%}
      
    {%- elif condition == "sunny" -%}
      
    {%- elif condition == "windy" -%}
      
    {%- elif condition == "windy-variant" -%}
      
    {%- elif condition == "exceptional" -%}
      
    {%- else -%}
      
    {%- endif -%}
  text: "{{ state_translated(weather_provider) }}"
  font: >-
    {%- set weatherlength = text | length -%}
    {%- if weatherlength < 7 -%}
      8
    {%- elif weatherlength < 12 -%}
      7
    {%- else -%}
      6
    {%- endif -%}
  ypos: "{{(haspbutton|int - 4) * 67 + 2}}"
  xpos: 0
  iconwidth: 65
  iconheight: 65
  iconfont: 8
  xcen: 2
  ycen: 1
  activepage: >-
    {%- set activepage = namespace() -%}
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^number\..*_active_page(?:_\d+|)$") -%}
        {%- set activepage.entity=entity -%}
      {%- endif -%}
    {%- endfor -%}
    {{ states(activepage.entity) | int(default=-1) }}
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'
  selectedfg: >-
    {%- if (selected_fgcolor|int) >= 0 -%}
      {{ selected_fgcolor }}
    {%- else -%}
      {%- set color = namespace() -%}
      {%- for entity in device_entities(haspdevice) -%}
        {%- if entity|regex_search("^light\..*_selected_foreground_color(?:_\d+|)$") -%}
          {%- set color.source=entity -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set brightness = state_attr(color.source, "brightness")|int(default=255) / 255 -%}
      {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int(default=0) -%}
      {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int(default=0) -%}
      {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int(default=0) -%}
      {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
    {%- endif -%}
  selectedbg: >-
    {%- if (selected_bgcolor|int) >= 0 -%}
      {{ selected_bgcolor }}
    {%- else -%}
      {%- set color = namespace() -%}
      {%- for entity in device_entities(haspdevice) -%}
        {%- if entity|regex_search("^light\..*_selected_background_color(?:_\d+|)$") -%}
          {%- set color.source=entity -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set brightness = state_attr(color.source, "brightness")|int(default=255) / 255 -%}
      {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int(default=0) -%}
      {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int(default=0) -%}
      {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int(default=0) -%}
      {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
    {%- endif -%}
  unselectedfg: >-
    {%- if (unselected_fgcolor|int) >= 0 -%}
      {{ unselected_fgcolor }}
    {%- else -%}
      {%- set color = namespace() -%}
      {%- for entity in device_entities(haspdevice) -%}
        {%- if entity|regex_search("^light\..*_unselected_foreground_color(?:_\d+|)$") -%}
          {%- set color.source=entity -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set brightness = state_attr(color.source, "brightness")|int(default=255) / 255 -%}
      {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int(default=0) -%}
      {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int(default=0) -%}
      {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int(default=0) -%}
      {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
    {%- endif -%}
  unselectedbg: >-
    {%- if (unselected_bgcolor|int) >= 0 -%}
      {{ unselected_bgcolor }}
    {%- else -%}
      {%- set color = namespace() -%}
      {%- for entity in device_entities(haspdevice) -%}
        {%- if entity|regex_search("^light\..*_unselected_background_color(?:_\d+|)$") -%}
          {%- set color.source=entity -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set brightness = state_attr(color.source, "brightness")|int(default=255) / 255 -%}
      {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int(default=0) -%}
      {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int(default=0) -%}
      {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int(default=0) -%}
      {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
    {%- endif -%}
  icon_color: >-
    {%- if not colorize_icon -%}
      {{ selectedfg }}
    {%- else -%}
      {%- set condition=states(weather_provider) -%}
      {%- if condition == "clear-night" -%}
        6350
      {%- elif condition == "cloudy" -%}
        29779
      {%- elif condition == "fog" -%}
        29779
      {%- elif condition == "hail" -%}
        29779
      {%- elif condition == "lightning" -%}
        65504
      {%- elif condition == "lightning-rainy" -%}
        65504
      {%- elif condition == "partlycloudy" -%}
        29779
      {%- elif condition == "pouring" -%}
        29779
      {%- elif condition == "rainy" -%}
        29779
      {%- elif condition == "snowy" -%}
        1535
      {%- elif condition == "snowy-rainy" -%}
        1535
      {%- elif condition == "sunny" -%}
        65504
      {%- elif condition == "windy" -%}
        1535
      {%- elif condition == "windy-variant" -%}
        1535
      {%- elif condition == "exceptional" -%}
        63488
      {%- else -%}
        {{ selected_fgcolor }}
      {%- endif -%}
    {%- endif -%}  

trigger_variables:
  haspdevice: !input haspdevice
  haspname: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\..+_sensor(?:_\d+|)$") -%}
        {{- entity|regex_replace(find="^sensor\.(?:hasp_)?(.*)_sensor(?:_\d+|)$", replace="\\1", ignorecase=true) -}}
      {%- endif -%}
    {%- endfor -%}
  haspsensor: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\..+_sensor(?:_\d+|)$") -%}
        {{ entity }}
      {%- endif -%}
    {%- endfor -%}
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'

trigger:
  - platform: state
    entity_id: !input weather_provider
  - platform: homeassistant
    event: start
  - platform: template
    value_template: "{{ is_state(haspsensor, 'ON') }}"
  - platform: mqtt
    topic: "{{jsontopic}}"
  - platform: mqtt
    topic: "{{selectedfgtopic}}"
  - platform: mqtt
    topic: "{{selectedbgtopic}}"
  - platform: mqtt
    topic: "{{unselectedfgtopic}}"
  - platform: mqtt
    topic: "{{unselectedbgtopic}}"

condition:
  - condition: template
    value_template: "{{ is_state(haspsensor, 'ON') }}"

action:
  - choose:
      #########################################################################
      # RUN ACTIONS or Home Assistant Startup or HASPone Connect
      # Apply styles, place text, and then place icon if our target page is currently active
      - conditions:
          - condition: template
            value_template: >- 
              {{-
                (trigger is not defined)
              or
                (trigger.platform is none)
              or
                ((trigger.platform == 'homeassistant') and (trigger.event == 'start'))
              or
                ((trigger.platform == 'template') and (trigger.entity_id == haspsensor) and (trigger.to_state.state == 'ON'))
              -}}
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                ["{{haspobject}}.font={{font}}",
                "{{haspobject}}.xcen={{xcen}}",
                "{{haspobject}}.ycen={{ycen}}",
                "{{haspobject}}.pco={{selectedfg}}",
                "{{haspobject}}.bco={{selectedbg}}",
                "{{haspobject}}.pco2={{unselectedfg}}",
                "{{haspobject}}.bco2={{unselectedbg}}",
                "{{haspobject}}.txt=\"{{text}} \""
                {%- if activepage|int == hasppage|int -%}
                ,"delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""
                {%- endif -%}]
      #########################################################################
      # Update weather condition if our weather provider changed state
      - conditions:
          - condition: template
            value_template: '{{ (trigger.platform == "state") and (trigger.entity_id == weather_provider) }}'
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                ["{{haspobject}}.pco={{selectedfg}}",
                "{{haspobject}}.font={{font}}",
                "{{haspobject}}.txt=\"{{text}} \""
                {%- if activepage|int == hasppage|int -%}
                ,"delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""
                {%- endif -%}]

      #########################################################################
      # Catch triggers fired by incoming MQTT messages
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              #########################################################################
              # Catch incoming JSON messages
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == jsontopic) and trigger.payload_json is defined }}"
                sequence:
                  - choose:
                      #########################################################################
                      # Icon overlay
                      - conditions: # Somebody pressed our button which hides the overlaid icon.  Put it back.
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic ) and (trigger.payload_json.event == haspobject ) and (trigger.payload_json.value == "OFF") and (activepage|int == hasppage|int)}}'
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: "{{jsoncommandtopic}}"
                              payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""]'
                      - conditions: # Page changed to our page, so place the icon on the screen.
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic ) and (trigger.payload_json.event == "page" ) and (trigger.payload_json.value == hasppage|int) }}'
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: "{{jsoncommandtopic}}"
                              payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""]'
              #########################################################################
              # Theme: Apply selected foreground color when it changes.
              # Any change to the button will remove the overlaid icon.
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == selectedfgtopic) and ((selected_fgcolor|int) == -1) }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.pco"
                      payload: "{{trigger.payload}}"
                  - condition: template
                    value_template: "{{ activepage|int == hasppage|int }}"
                  - delay: "00:00:00.5"
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""]'
              #########################################################################
              # Theme: Apply selected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == selectedbgtopic) and ((selected_bgcolor|int) == -1) }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.bco"
                      payload: "{{trigger.payload}}"
                  - condition: template
                    value_template: "{{ activepage|int == hasppage|int }}"
                  - delay: "00:00:00.5"
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""]'
              #########################################################################
              # Theme: Apply unselected foreground color on change
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == unselectedfgtopic) and ((unselected_fgcolor|int) == -1) }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.pco2"
                      payload: "{{trigger.payload}}"
                  - condition: template
                    value_template: "{{ activepage|int == hasppage|int }}"
                  - delay: "00:00:00.5"
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""]'
              #########################################################################
              # Theme: Apply unselected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == unselectedbgtopic) and ((unselected_bgcolor|int) == -1) }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{commandtopic}}.bco2"
                      payload: "{{trigger.payload}}"
                  - condition: template
                    value_template: "{{ activepage|int == hasppage|int }}"
                  - delay: "00:00:00.5"
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{icon_color}},0,1,1,3,\"{{icon}}\""]'
